import re
import asyncio
import json
import os
import calendar
import keyboards as kb 
from datetime import datetime
from num2words import num2words
from config import BOT_TOKEN, ALLOWED_USERS, ADMIN_ID
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from docling_qa import ask_ai_from_pdf
from docling_qa2 import ask_ai_from_pdf2
from docx_replacer import fill_doc
from parse_pko_new_version import parse_contract_data_from_pdf, parse_active_total
from parse_pko_old_ru_version import parse_old_ru_contract_data_from_pdf, parse_old_ru_total_contracts
from parse_pko_old_kz_version import parse_pko_old_kz_version, parse_old_kz_total_contracts
from parse_pro_green_ru_version import parse_old_green_ru_total_contracts, parse_pko_green_ru_version
from datetime import datetime
import unicodedata
from utils import add_user, is_user_allowed, get_user_list, remove_user, format_amount_with_words
from datetime import datetime, timedelta







bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class FileInfo(StatesGroup):
    user_text = State()
    file_path = State()
    reason = State()
    MFO = State()
    mfo = State()
    attached_documents = State()

class BatchProcess(StatesGroup):
    file_path = State()
    user_text = State()
    mfo_list = State()
    reason = State()
    attached_documents = State()
    file_version = State()


def is_authorized(func):
    async def wrapper(message: Message, *args, **kwargs):
        if is_user_allowed(message.from_user.id):
            return await func(message, *args, **kwargs)
        else:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –•–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ?",
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="request_access")]
                             ]))
    return wrapper

@dp.message(Command("users"))
async def list_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    users = get_user_list()
    if not users:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for uid, info in users.items():
        name = f"{info.get('first_name', '')} {info.get('last_name', '')}".strip()
        username = f"@{info.get('username')}" if info.get('username') else "‚Äî"
        text += f"‚Ä¢ <b>{name}</b> {username} ‚Äî <code>{uid}</code>\n/remove_{uid}\n\n"

    await message.answer(text, parse_mode="HTML")


@dp.message(F.text.startswith("/remove_"))
async def remove_user_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    user_id = int(message.text.split("_")[1])
    remove_user(user_id)
    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
    try:
        await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞




@dp.callback_query(F.data == "request_access")
async def request_access(callback: CallbackQuery):
    await callback.message.edit_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    user = callback.from_user
    await callback.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ 7 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:7")],
        [InlineKeyboardButton(text="‚úÖ 14 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:14")],
        [InlineKeyboardButton(text="‚úÖ 30 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:30")],
        [InlineKeyboardButton(text="‚úÖ –ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"grant:{user.id}:0")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny:{user.id}")]
    ])

    await bot.send_message(ADMIN_ID,
        f"üì• –ó–∞–ø—Ä–æ—Å –æ—Ç @{user.username or '-'}\nID: {user.id}\n–ò–º—è: {user.first_name}",
        reply_markup=keyboard)
    
    
@dp.callback_query(F.data.startswith("grant:"))
async def grant_access(callback: CallbackQuery):
    _, user_id, days = callback.data.split(":")
    user_id = int(user_id)
    days = int(days)

    user = await bot.get_chat(user_id)

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if days == 0:
        until = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    else:
        end_date = datetime.now() + timedelta(days=days)
        until = end_date.strftime("%d.%m.%Y")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
    add_user(user_id, user.first_name, user.last_name or "", user.username or "", days)

    await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –¥–æ {until}." if days else "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ + –ø–∏—à–µ–º –∫–æ–º—É –≤—ã–¥–∞–Ω–æ)
    full_name = f"{user.first_name} {user.last_name}".strip()
    username = f"@{user.username}" if user.username else ""
    await callback.message.edit_text(
        f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name} {username} (ID: <code>{user_id}</code>) –¥–æ <b>{until}</b>.",
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("deny:"))
async def deny_access(callback: CallbackQuery):
    _, user_id = callback.data.split(":")
    await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    try:
        await bot.send_message(user_id, "üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    except:
        pass





def remove_cents(value: str) -> str:
            # –£–¥–∞–ª—è–µ—Ç –∫–æ–ø–µ–π–∫–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π
            return re.sub(r'[.,]\d{1,2}$', '', value)
    

def clean(name: str) -> str:
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã Unicode (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "Cf" ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏–µ)
    name = ''.join(ch for ch in name if unicodedata.category(ch) != 'Cf')
    # –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—ã, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    return re.sub(r"[ \t\u00A0]+", "", name).strip().lower()


def get_current_date_str():
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    now = datetime.now()
    day = now.day
    month = months[now.month]
    year = now.year
    return f'¬´{day}¬ª {month} {year} –≥–æ–¥–∞'


def get_term_by_amount(amount_str):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –≤–∞–ª—é—Ç—ã, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits_only = ''.join(filter(str.isdigit, amount_str))
    
    if not digits_only:
        return "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞"

    amount = int(digits_only)

    if amount < 100_000:
        return "–æ—Ç 3 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤"
    elif amount < 150_000:
        return "–æ—Ç 6 –¥–æ 12 –º–µ—Å—è—Ü–µ–≤"
    else:
        return "–æ—Ç 12 –¥–æ 24 –º–µ—Å—è—Ü–µ–≤"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ JSON
def load_companies_db():
    try:
        with open("companies_db.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        print("–§–∞–π–ª companies_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON.")
        return []

def normalize_string(s):
    return re.sub(r'\s+', '', s).lower()  # —É–¥–∞–ª—è–µ—Ç –í–°–ï –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

def find_company_by_trade_name(trade_name):
    normalized_trade_name = normalize_string(trade_name)
    companies_data = load_companies_db()
    for company in companies_data:
        if normalize_string(company["trade_name"]) == normalized_trade_name:
            return company
    return None

def pluralize(value, one, few, many):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
    if 11 <= value % 100 <= 14:
        return many
    elif value % 10 == 1:
        return one
    elif 2 <= value % 10 <= 4:
        return few
    else:
        return many

def calculate_date_diff(start_date_str, end_date_str):
    start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
    end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
    
    if end_date < start_date:
        return "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π"

    years = end_date.year - start_date.year
    months = end_date.month - start_date.month
    days = end_date.day - start_date.day

    if days < 0:
        months -= 1
        prev_month = end_date.month - 1 if end_date.month > 1 else 12
        prev_year = end_date.year if end_date.month > 1 else end_date.year - 1
        days_in_prev_month = calendar.monthrange(prev_year, prev_month)[1]
        days += days_in_prev_month

    if months < 0:
        years -= 1
        months += 12

    result = []
    if years > 0:
        result.append(f"{years} {pluralize(years, '–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç')}")
    if months > 0:
        result.append(f"{months} {pluralize(months, '–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤')}")
    if days > 0:
        result.append(f"{days} {pluralize(days, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')}")

    return " –∏ ".join(result) if result else "–º–µ–Ω–µ–µ –¥–Ω—è"





# @dp.message(F.document)
# async def cmd_batch(message: Message, state: FSMContext):
#     await state.set_state(BatchProcess.file_path)
#     await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º. (–ñ–∏—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)")

@dp.message(F.document)
@is_authorized
async def handle_pdf_with_text(message: Message, state: FSMContext, **kwargs):
    document = message.document

    if document.mime_type != "application/pdf":
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    if not message.caption or not message.caption.strip():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ PDF-—Ñ–∞–π–ª—É.")
        return

    file_path = f"temp/{message.from_user.id}_{document.file_name}"
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    await state.update_data(user_text=message.caption.strip(), file_path=file_path)
    await state.set_state(BatchProcess.file_version)
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞:", reply_markup=kb.select_file_version)



@dp.message(BatchProcess.file_version)
async def handle_choose_file_version(message: Message, state: FSMContext):
    if message.text not in ["–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)", "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)", "–ó–µ–ª–µ–Ω–∞—è –≤–µ—Ä—Å–∏—è(–∫–∞–∑)", "–ó–µ–ª–µ–Ω–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)"]:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", reply_markup=ReplyKeyboardRemove())
        return
    
    await state.update_data(file_version=message.text)

    await state.set_state(BatchProcess.mfo_list)
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message(BatchProcess.mfo_list)
async def handle_mfo_list(message: Message, state: FSMContext):
    raw_mfos = message.text.splitlines()
    mfo_names = [clean(name) for name in raw_mfos if clean(name)]

    await state.update_data(mfo_names=mfo_names)
    await state.set_state(BatchProcess.reason)
    data = await state.get_data()

    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É. –ü—Ä–∏–º–µ—Ä:")
    if data["file_version"] == "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)":

        await message.answer(f"""–î–≤–∏–∂–∏–º–æ–≥–æ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ—Ç. –ù–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑-–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.  –£ –º–µ–Ω—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å {parse_active_total(data["file_path"])} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–∞, –∏ —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ç—Ä—É–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏. –° –º–æ–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–Ω–∏–º–∞—é—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –≤—Å–µ {parse_active_total(data["file_path"])} –∫—Ä–µ–¥–∏—Ç–∞, —è –¥–∞–∂–µ –ø–æ–ª–æ–≤–∏–Ω—É –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ —Ä—É–∫–∏ –Ω–µ –ø–æ–ª—É—á–∞—é. –Ø –∫–æ—Ä–º–∏–ª–µ—Ü —Å–µ–º—å–∏, –∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–∞–∂–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö. –ü—Ä–æ—à—É –¥–∞—Ç—å –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º –≤ —Ä–∞–∑–º–µ—Ä–µ 35000 —Ç—ã—Å—è—á —Ç–µ–Ω–≥–µ.""")

    elif data["file_version"] == "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)":

        await message.answer(f"""–î–≤–∏–∂–∏–º–æ–≥–æ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ—Ç. –ù–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑-–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.  –£ –º–µ–Ω—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å {parse_old_ru_total_contracts(data["file_path"])} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–∞, –∏ —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ç—Ä—É–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏. –° –º–æ–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–Ω–∏–º–∞—é—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –≤—Å–µ {parse_old_ru_total_contracts(data["file_path"])} –∫—Ä–µ–¥–∏—Ç–∞, —è –¥–∞–∂–µ –ø–æ–ª–æ–≤–∏–Ω—É –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ —Ä—É–∫–∏ –Ω–µ –ø–æ–ª—É—á–∞—é. –Ø –∫–æ—Ä–º–∏–ª–µ—Ü —Å–µ–º—å–∏, –∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–∞–∂–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö. –ü—Ä–æ—à—É –¥–∞—Ç—å –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º –≤ —Ä–∞–∑–º–µ—Ä–µ 35000 —Ç—ã—Å—è—á —Ç–µ–Ω–≥–µ.""")


    elif data["file_version"] == "–ó–µ–ª–µ–Ω–∞—è –≤–µ—Ä—Å–∏—è(–∫–∞–∑)":

        await message.answer(f"""–î–≤–∏–∂–∏–º–æ–≥–æ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ—Ç. –ù–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑-–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.  –£ –º–µ–Ω—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å {parse_old_kz_total_contracts(data["file_path"])} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–∞, –∏ —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ç—Ä—É–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏. –° –º–æ–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–Ω–∏–º–∞—é—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –≤—Å–µ {parse_old_kz_total_contracts(data["file_path"])} –∫—Ä–µ–¥–∏—Ç–∞, —è –¥–∞–∂–µ –ø–æ–ª–æ–≤–∏–Ω—É –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ —Ä—É–∫–∏ –Ω–µ –ø–æ–ª—É—á–∞—é. –Ø –∫–æ—Ä–º–∏–ª–µ—Ü —Å–µ–º—å–∏, –∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–∞–∂–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö. –ü—Ä–æ—à—É –¥–∞—Ç—å –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º –≤ —Ä–∞–∑–º–µ—Ä–µ 35000 —Ç—ã—Å—è—á —Ç–µ–Ω–≥–µ.""")


    elif data["file_version"] == "–ó–µ–ª–µ–Ω–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)":

        await message.answer(f"""–î–≤–∏–∂–∏–º–æ–≥–æ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ—Ç. –ù–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑-–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.  –£ –º–µ–Ω—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å {parse_old_green_ru_total_contracts(data["file_path"])} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–∞, –∏ —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ç—Ä—É–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏. –° –º–æ–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–Ω–∏–º–∞—é—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –≤—Å–µ {parse_old_green_ru_total_contracts(data["file_path"])} –∫—Ä–µ–¥–∏—Ç–∞, —è –¥–∞–∂–µ –ø–æ–ª–æ–≤–∏–Ω—É –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ —Ä—É–∫–∏ –Ω–µ –ø–æ–ª—É—á–∞—é. –Ø –∫–æ—Ä–º–∏–ª–µ—Ü —Å–µ–º—å–∏, –∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–∞–∂–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö. –ü—Ä–æ—à—É –¥–∞—Ç—å –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º –≤ —Ä–∞–∑–º–µ—Ä–µ 35000 —Ç—ã—Å—è—á —Ç–µ–Ω–≥–µ.""")




@dp.message(BatchProcess.reason)
async def handle_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await state.set_state(BatchProcess.attached_documents)
    await message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ü—Ä–∏–ª–∞–≥–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä:")
    await message.answer("""—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –ø–æ–ª–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Å–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è.""")

@dp.message(BatchProcess.attached_documents)
async def handle_attached_documents(message: Message, state: FSMContext):
    await state.update_data(attached_documents=message.text)
    data = await state.get_data()
    await state.clear()

    file_path = data["file_path"]
    user_text = data["user_text"]
    mfo_names = data["mfo_names"]
    reason = data["reason"]
    attached_documents = data["attached_documents"]

    status_msg = await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    try:

        response = ask_ai_from_pdf2(file_path, user_text)
        user_data = json.loads(response)


        for mfo_name in mfo_names:

            company = find_company_by_trade_name(mfo_name)
            if not company:
                await message.answer(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {mfo_name}")
                continue
            


            # —Ç—É—Ç –Ω—É–∂–Ω–æ —Å–¥–ª–µ–∞—Ç—å –≤—ã–±–æ—Ä –ø–∞—Ä—Å–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–ø–∞
            if data["file_version"] == "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)":
                result = parse_contract_data_from_pdf(file_path, company_name=company["search_field"])
            elif data["file_version"] == "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)":
                result = parse_old_ru_contract_data_from_pdf(file_path, company_name=company["search_field"])
            elif data["file_version"] == "–ó–µ–ª–µ–Ω–∞—è –≤–µ—Ä—Å–∏—è(–∫–∞–∑)":
                result = parse_pko_old_kz_version(file_path, company_name=company["search_field"])
            elif data["file_version"] == "–ó–µ–ª–µ–Ω–∞—è –≤–µ—Ä—Å–∏—è(—Ä—É—Å)":
                result = parse_pko_green_ru_version(file_path, company_name=company["search_field"])
                    


            if not result:
                await message.answer(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∫–æ –¥–ª—è: {mfo_name}")
                continue


            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            for idx, contract in enumerate(result, 1):
                try:
                    date_diff = calculate_date_diff(contract["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"], contract["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"])

                    replacements = {
                        "fullName": user_data["fullName"],
                        "dateBirth": user_data["dateBirth"],
                        "amount": format_amount_with_words(user_data["amount"]),
                        "IIN": contract["–ò–ò–ù"],
                        "receiver": company["details"]["to"],
                        "mfoAddress": company["details"]["address"],
                        "bin": company["details"]["bin"],
                        "mfoEmail": company["details"]["email"],
                        "contract_number": contract["–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"],
                        "contract_start_date": contract["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"],
                        "date_diff": date_diff,
                        "reason": reason,
                        "attached_documents": attached_documents,
                        "date_now": get_current_date_str(),
                    }

                    doc_name = f"{contract.get('–ò–ò–ù', '')}_{mfo_name}_{idx}.docx"
                    doc_path = f"temp/{doc_name}"
                    filename = f"{mfo_name} –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä {user_data['shortName']} ({idx}).docx"

                    fill_doc("template.docx", doc_path, replacements)

                    original_file = FSInputFile(file_path, filename="1")
                    result_file = FSInputFile(doc_path, filename=filename)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    await bot.send_document("-4753379582", original_file, caption=user_text)
                    await message.answer_document(result_file, caption=f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è: {mfo_name} (–∫–æ–Ω—Ç—Ä–∞–∫—Ç {idx}) \n–°—É–º–º–∞: {contract['–û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞']} \n–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {contract['–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞']} ")

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    # os.remove(doc_path)
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É {idx}: {e}")

        

        # await status_msg.delete()
    except Exception as e:
        await status_msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")






# ---------------------------------------------------------
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–≤ –ø–æ–¥–ø–∏—Å–∏).")











    
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())